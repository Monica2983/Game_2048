import numpy as np
import matplotlib.pyplot as plt

class DiscretePerceptron:
    def __init__(self, input_size):
        self.weights = np.zeros(input_size)
        self.bias = 0

    def predict(self, inputs):
        return 1 if np.dot(self.weights, inputs) + self.bias > 0 else 0

    def train(self, inputs, targets, learning_rate=0.1, epochs=100):
        for _ in range(epochs):
            for x, y in zip(inputs, targets):
                error = y - self.predict(x)
                self.weights += learning_rate * error * x
                self.bias += learning_rate * error

def plot_decision_boundary(perceptron, inputs, targets):
    plt.scatter(inputs[:, 0], inputs[:, 1], c=targets, cmap='coolwarm', label='Data Points')
    x_min, x_max = inputs[:, 0].min() - 1, inputs[:, 0].max() + 1
    y_min, y_max = inputs[:, 1].min() - 1, inputs[:, 1].max() + 1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))
    grid_points = np.c_[xx.ravel(), yy.ravel()]
    zz = np.array([perceptron.predict(p) for p in grid_points]).reshape(xx.shape)
    plt.contourf(xx, yy, zz, alpha=0.3, cmap='coolwarm')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title('Perceptron Decision Boundary')
    plt.legend()
    plt.show()

def main():
    num_samples, input_size = 100, 2
    inputs = np.vstack((
        np.random.uniform(0, 5, size=(num_samples // 2, input_size)),
        np.random.uniform(5, 10, size=(num_samples // 2, input_size))
    ))
    targets = np.array([0] * (num_samples // 2) + [1] * (num_samples // 2))
    indices = np.random.permutation(num_samples)
    inputs, targets = inputs[indices], targets[indices]
    
    perceptron = DiscretePerceptron(input_size)
    perceptron.train(inputs, targets)
    test_data = np.random.uniform(0, 10, size=(10, input_size))
    print("\n".join(
        [f"Data {data} belongs to class {perceptron.predict(data)}" for data in test_data]
    ))
    plot_decision_boundary(perceptron, inputs, targets)

if __name__ == "__main__":
    main()
